{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"wOAaeA,EAXF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBAEXC,EAAQF,EAAKG,UAAY,qBAAwB,iBACvD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCMjCK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EACQ,KAIP,yBAAKJ,UAAU,SACVI,I,gBCeE,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAChBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEf,OAAOM,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAa1C,EAVA,SAACO,GAEZ,OADgBT,IAAMU,KAdV,aAcwBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAnBJ,aAmBI,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCfvCK,EAAS,WAOX,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAmFOC,EA9EH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,iBAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAOdC,qBAAU,WACNC,IAEKvB,MAAK,SAAAwB,GAAY,OAAIT,EAASS,QACpC,IAEH,IAiBMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAsBhE,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcK,QAAS2B,IACvB,6BACI,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QAAmDA,EAAU,YAAc,QAE/E,4BAEIO,EAAYE,KACR,SAAA1C,GAAI,OAAI,kBAAC,EAAD,CAAM2C,IAAK3C,EAAKa,GAAIb,KAAMA,EAAMC,iBAAkB,kBA7BjD,SAACY,GACtB,IAAMb,EAAO6B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOA,KAChCiC,EAAW,2BAAO9C,GAAP,IAAaG,WAAYH,EAAKG,YAE/CmC,EACYzB,EAAIiC,GACX/B,MAAK,SAAAgC,GAAY,OAAIjB,EAASD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAM+C,SACvEC,OAAM,SAAAC,GACHb,EAAgB,SAAD,OACFpC,EAAKK,QADH,sCAGb6C,YAAW,WACTd,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEhC,KAAOA,SAc8BZ,CAAiBD,EAAKa,WAM9F,0BAAMsC,SAvDE,SAAAC,GACZA,EAAMC,iBACN,IAAMC,EAAa,CACfjD,QAAS0B,EACTjB,MAAM,IAAIyC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAG/BpB,EACYgB,GACPvC,MAAK,SAAAgC,GACFjB,EAASD,EAAMX,OAAO6B,IACtBf,EAAW,SA4CX,2BAAO2B,MAAO5B,EAAS6B,SAxCV,SAACR,GAAD,OAAWpB,EAAWoB,EAAMS,OAAOF,UAyChD,4BAAQG,KAAK,UAAb,SAGJ,kBAAC,EAAD,Q,MCzFZC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3af49ebe.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n\n    const label = note.important ? 'Make NOT important'  : 'MAKE important'\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note\n","import React from 'react'\n\nconst Notification = ({message}) => {\n    if(message === null){\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default {getAll, create, update}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\n\nimport noteService from './services/notes'\n\nconst Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n  \n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n      </div> \n    )\n  }\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('a new note...')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    // Retrieve all notes at inital render at store in notes\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => setNotes(initialNotes))\n    }, [])\n\n    const addNote = event => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n        }\n        // Adding note object to API and display on front end\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => setNewNote(event.target.value)\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n    // Updates note \"importance\" in API\n    const toggleImportance = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = {...note, important: !note.important}\n        \n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => setNotes(notes.map(note => note.id !== id ? note: returnedNote)))\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                  )\n                  setTimeout(() => {\n                    setErrorMessage(null)\n                  }, 5000)                \n                  \n                  setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage}/>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>Show {showAll ? 'Important' : 'All'}</button>\n            </div>\n            <ul>\n                {\n                notesToShow.map(\n                    note => <Note key={note.id} note={note} toggleImportance={() => toggleImportance(note.id)}/>\n                )\n                }\n\n            </ul>\n\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">Save</button>\n            </form>\n\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render( <App />, document.getElementById('root'))"],"sourceRoot":""}